//using Normal.Realtime.Serialization;
//using System.Collections;
//using System.Collections.Generic;
//using UnityEngine;
//using Normal.Realtime;

//[RealtimeModel]
//public partial class UserListModel
//{

//    [RealtimeProperty(1, true, true)]
//    private RealtimeArray<HazardListModel> _globalHiraState;
//}

///* ----- Begin Normal Autogenerated Code ----- */
//public partial class UserListModel : RealtimeModel {
//    public Normal.Realtime.Serialization.RealtimeArray<HazardListModel> globalHiraState {
//        get => _globalHiraState;
//    }
    
//    public enum PropertyID : uint {
//        GlobalHiraState = 1,
//    }
    
//    #region Properties
    
//    private ModelProperty<Normal.Realtime.Serialization.RealtimeArray<HazardListModel>> _globalHiraStateProperty;
    
//    #endregion
    
//    public UserListModel() : base(null) {
//        RealtimeModel[] childModels = new RealtimeModel[1];
        
//        _globalHiraState = new Normal.Realtime.Serialization.RealtimeArray<HazardListModel>();
//        childModels[0] = _globalHiraState;
        
//        SetChildren(childModels);
        
//        _globalHiraStateProperty = new ModelProperty<Normal.Realtime.Serialization.RealtimeArray<HazardListModel>>(1, _globalHiraState);
//    }
    
//    protected override int WriteLength(StreamContext context) {
//        var length = 0;
//        length += _globalHiraStateProperty.WriteLength(context);
//        return length;
//    }
    
//    protected override void Write(WriteStream stream, StreamContext context) {
//        var writes = false;
//        writes |= _globalHiraStateProperty.Write(stream, context);
//        if (writes) InvalidateContextLength(context);
//    }
    
//    protected override void Read(ReadStream stream, StreamContext context) {
//        var anyPropertiesChanged = false;
//        while (stream.ReadNextPropertyID(out uint propertyID)) {
//            var changed = false;
//            switch (propertyID) {
//                case (uint) PropertyID.GlobalHiraState: {
//                    changed = _globalHiraStateProperty.Read(stream, context);
//                    break;
//                }
//                default: {
//                    stream.SkipProperty();
//                    break;
//                }
//            }
//            anyPropertiesChanged |= changed;
//        }
//        if (anyPropertiesChanged) {
//            UpdateBackingFields();
//        }
//    }
    
//    private void UpdateBackingFields() {
//        _globalHiraState = globalHiraState;
//    }
    
//}
///* ----- End Normal Autogenerated Code ----- */
