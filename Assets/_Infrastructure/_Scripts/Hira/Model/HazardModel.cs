using Normal.Realtime.Serialization;
using System.Collections;
using UnityEngine;
using Normal.Realtime;


[RealtimeModel]
public partial class HazardModel
{
    [RealtimeProperty(1, true, true)]
    private int _state;

    [RealtimeProperty(2, true, true)]
    private int _index;

    [RealtimeProperty(3, true, true)]
    private int _ownerID;

    // used to switch the hazards _classType across network.
    // _classType <=> ["A","B","C","D",...]
    // the first element represets the hazard in the 'off' state, and the last last element represents the most dangerous form of the hazard.
    [RealtimeProperty(4, true, true)]
    private int _classType;

}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class HazardModel : RealtimeModel {
    public int state {
        get {
            return _stateProperty.value;
        }
        set {
            if (_stateProperty.value == value) return;
            _stateProperty.value = value;
            InvalidateReliableLength();
            FireStateDidChange(value);
        }
    }
    
    public int index {
        get {
            return _indexProperty.value;
        }
        set {
            if (_indexProperty.value == value) return;
            _indexProperty.value = value;
            InvalidateReliableLength();
            FireIndexDidChange(value);
        }
    }
    
    public int ownerID {
        get {
            return _ownerIDProperty.value;
        }
        set {
            if (_ownerIDProperty.value == value) return;
            _ownerIDProperty.value = value;
            InvalidateReliableLength();
            FireOwnerIDDidChange(value);
        }
    }
    
    public int classType {
        get {
            return _classTypeProperty.value;
        }
        set {
            if (_classTypeProperty.value == value) return;
            _classTypeProperty.value = value;
            InvalidateReliableLength();
            FireClassTypeDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(HazardModel model, T value);
    public event PropertyChangedHandler<int> stateDidChange;
    public event PropertyChangedHandler<int> indexDidChange;
    public event PropertyChangedHandler<int> ownerIDDidChange;
    public event PropertyChangedHandler<int> classTypeDidChange;
    
    public enum PropertyID : uint {
        State = 1,
        Index = 2,
        OwnerID = 3,
        ClassType = 4,
    }
    
    #region Properties
    
    private ReliableProperty<int> _stateProperty;
    
    private ReliableProperty<int> _indexProperty;
    
    private ReliableProperty<int> _ownerIDProperty;
    
    private ReliableProperty<int> _classTypeProperty;
    
    #endregion
    
    public HazardModel() : base(null) {
        _stateProperty = new ReliableProperty<int>(1, _state);
        _indexProperty = new ReliableProperty<int>(2, _index);
        _ownerIDProperty = new ReliableProperty<int>(3, _ownerID);
        _classTypeProperty = new ReliableProperty<int>(4, _classType);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _stateProperty.UnsubscribeCallback();
        _indexProperty.UnsubscribeCallback();
        _ownerIDProperty.UnsubscribeCallback();
        _classTypeProperty.UnsubscribeCallback();
    }
    
    private void FireStateDidChange(int value) {
        try {
            stateDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireIndexDidChange(int value) {
        try {
            indexDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireOwnerIDDidChange(int value) {
        try {
            ownerIDDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireClassTypeDidChange(int value) {
        try {
            classTypeDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _stateProperty.WriteLength(context);
        length += _indexProperty.WriteLength(context);
        length += _ownerIDProperty.WriteLength(context);
        length += _classTypeProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _stateProperty.Write(stream, context);
        writes |= _indexProperty.Write(stream, context);
        writes |= _ownerIDProperty.Write(stream, context);
        writes |= _classTypeProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.State: {
                    changed = _stateProperty.Read(stream, context);
                    if (changed) FireStateDidChange(state);
                    break;
                }
                case (uint) PropertyID.Index: {
                    changed = _indexProperty.Read(stream, context);
                    if (changed) FireIndexDidChange(index);
                    break;
                }
                case (uint) PropertyID.OwnerID: {
                    changed = _ownerIDProperty.Read(stream, context);
                    if (changed) FireOwnerIDDidChange(ownerID);
                    break;
                }
                case (uint) PropertyID.ClassType: {
                    changed = _classTypeProperty.Read(stream, context);
                    if (changed) FireClassTypeDidChange(classType);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _state = state;
        _index = index;
        _ownerID = ownerID;
        _classType = classType;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
