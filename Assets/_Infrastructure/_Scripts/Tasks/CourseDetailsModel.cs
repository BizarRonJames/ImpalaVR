using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class CourseDetailsModel
{
    [RealtimeProperty(1, true, true)]
    string _courseName;

    [RealtimeProperty(2, true, true)]
    string _courseType;

    [RealtimeProperty(3, true, true)]
    int _courseID;

    [RealtimeProperty(4, true, true)]
    bool _courseStarted = false;
}


/* ----- Begin Normal Autogenerated Code ----- */
public partial class CourseDetailsModel : RealtimeModel {
    public string courseName {
        get {
            return _courseNameProperty.value;
        }
        set {
            if (_courseNameProperty.value == value) return;
            _courseNameProperty.value = value;
            InvalidateReliableLength();
            FireCourseNameDidChange(value);
        }
    }
    
    public string courseType {
        get {
            return _courseTypeProperty.value;
        }
        set {
            if (_courseTypeProperty.value == value) return;
            _courseTypeProperty.value = value;
            InvalidateReliableLength();
            FireCourseTypeDidChange(value);
        }
    }
    
    public int courseID {
        get {
            return _courseIDProperty.value;
        }
        set {
            if (_courseIDProperty.value == value) return;
            _courseIDProperty.value = value;
            InvalidateReliableLength();
            FireCourseIDDidChange(value);
        }
    }
    
    public bool courseStarted {
        get {
            return _courseStartedProperty.value;
        }
        set {
            if (_courseStartedProperty.value == value) return;
            _courseStartedProperty.value = value;
            InvalidateReliableLength();
            FireCourseStartedDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(CourseDetailsModel model, T value);
    public event PropertyChangedHandler<string> courseNameDidChange;
    public event PropertyChangedHandler<string> courseTypeDidChange;
    public event PropertyChangedHandler<int> courseIDDidChange;
    public event PropertyChangedHandler<bool> courseStartedDidChange;
    
    public enum PropertyID : uint {
        CourseName = 1,
        CourseType = 2,
        CourseID = 3,
        CourseStarted = 4,
    }
    
    #region Properties
    
    private ReliableProperty<string> _courseNameProperty;
    
    private ReliableProperty<string> _courseTypeProperty;
    
    private ReliableProperty<int> _courseIDProperty;
    
    private ReliableProperty<bool> _courseStartedProperty;
    
    #endregion
    
    public CourseDetailsModel() : base(null) {
        _courseNameProperty = new ReliableProperty<string>(1, _courseName);
        _courseTypeProperty = new ReliableProperty<string>(2, _courseType);
        _courseIDProperty = new ReliableProperty<int>(3, _courseID);
        _courseStartedProperty = new ReliableProperty<bool>(4, _courseStarted);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _courseNameProperty.UnsubscribeCallback();
        _courseTypeProperty.UnsubscribeCallback();
        _courseIDProperty.UnsubscribeCallback();
        _courseStartedProperty.UnsubscribeCallback();
    }
    
    private void FireCourseNameDidChange(string value) {
        try {
            courseNameDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireCourseTypeDidChange(string value) {
        try {
            courseTypeDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireCourseIDDidChange(int value) {
        try {
            courseIDDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireCourseStartedDidChange(bool value) {
        try {
            courseStartedDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _courseNameProperty.WriteLength(context);
        length += _courseTypeProperty.WriteLength(context);
        length += _courseIDProperty.WriteLength(context);
        length += _courseStartedProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _courseNameProperty.Write(stream, context);
        writes |= _courseTypeProperty.Write(stream, context);
        writes |= _courseIDProperty.Write(stream, context);
        writes |= _courseStartedProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.CourseName: {
                    changed = _courseNameProperty.Read(stream, context);
                    if (changed) FireCourseNameDidChange(courseName);
                    break;
                }
                case (uint) PropertyID.CourseType: {
                    changed = _courseTypeProperty.Read(stream, context);
                    if (changed) FireCourseTypeDidChange(courseType);
                    break;
                }
                case (uint) PropertyID.CourseID: {
                    changed = _courseIDProperty.Read(stream, context);
                    if (changed) FireCourseIDDidChange(courseID);
                    break;
                }
                case (uint) PropertyID.CourseStarted: {
                    changed = _courseStartedProperty.Read(stream, context);
                    if (changed) FireCourseStartedDidChange(courseStarted);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _courseName = courseName;
        _courseType = courseType;
        _courseID = courseID;
        _courseStarted = courseStarted;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
