
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class HazardStateModel
{
    [RealtimeProperty(1, false, true)] 
    private string _hazardStates;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class HazardStateModel : RealtimeModel {
    public string hazardStates {
        get {
            return _hazardStatesProperty.value;
        }
        set {
            if (_hazardStatesProperty.value == value) return;
            _hazardStatesProperty.value = value;
            InvalidateUnreliableLength();
            FireHazardStatesDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(HazardStateModel model, T value);
    public event PropertyChangedHandler<string> hazardStatesDidChange;
    
    public enum PropertyID : uint {
        HazardStates = 1,
    }
    
    #region Properties
    
    private UnreliableProperty<string> _hazardStatesProperty;
    
    #endregion
    
    public HazardStateModel() : base(null) {
        _hazardStatesProperty = new UnreliableProperty<string>(1, _hazardStates);
    }
    
    private void FireHazardStatesDidChange(string value) {
        try {
            hazardStatesDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _hazardStatesProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _hazardStatesProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.HazardStates: {
                    changed = _hazardStatesProperty.Read(stream, context);
                    if (changed) FireHazardStatesDidChange(hazardStates);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _hazardStates = hazardStates;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
