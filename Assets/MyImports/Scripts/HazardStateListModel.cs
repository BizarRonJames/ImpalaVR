using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class HazardStateListModel
{
    [RealtimeProperty(1,false, true)] 
    private RealtimeDictionary<HazardStateModel> _playerHazards;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class HazardStateListModel : RealtimeModel {
    public Normal.Realtime.Serialization.RealtimeDictionary<HazardStateModel> playerHazards {
        get => _playerHazards;
    }
    
    public enum PropertyID : uint {
        PlayerHazards = 1,
    }
    
    #region Properties
    
    private ModelProperty<Normal.Realtime.Serialization.RealtimeDictionary<HazardStateModel>> _playerHazardsProperty;
    
    #endregion
    
    public HazardStateListModel() : base(null) {
        RealtimeModel[] childModels = new RealtimeModel[1];
        
        _playerHazards = new Normal.Realtime.Serialization.RealtimeDictionary<HazardStateModel>();
        childModels[0] = _playerHazards;
        
        SetChildren(childModels);
        
        _playerHazardsProperty = new ModelProperty<Normal.Realtime.Serialization.RealtimeDictionary<HazardStateModel>>(1, _playerHazards);
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _playerHazardsProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _playerHazardsProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.PlayerHazards: {
                    changed = _playerHazardsProperty.Read(stream, context);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _playerHazards = playerHazards;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
