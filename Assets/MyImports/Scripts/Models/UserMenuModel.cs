using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class UserMenuModel
{
    //Lower Priority Variables
    [RealtimeProperty(1, false, true)]
    private int _menuState;
    [RealtimeProperty(2, false, true)]
    private Vector3 _menuPosition;
    [RealtimeProperty(3, false, true)]
    private string _hazardQuestion;


    //Higher Priority Variables
    [RealtimeProperty(4, true, true)]
    private int _activeButtonIndex;
    [RealtimeProperty(5, true, true)]
    private int _activeButtonFillPercentage;
    
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class UserMenuModel : RealtimeModel {
    public int menuState {
        get {
            return _menuStateProperty.value;
        }
        set {
            if (_menuStateProperty.value == value) return;
            _menuStateProperty.value = value;
            InvalidateUnreliableLength();
            FireMenuStateDidChange(value);
        }
    }
    
    public UnityEngine.Vector3 menuPosition {
        get {
            return _menuPositionProperty.value;
        }
        set {
            if (_menuPositionProperty.value == value) return;
            _menuPositionProperty.value = value;
            InvalidateUnreliableLength();
            FireMenuPositionDidChange(value);
        }
    }
    
    public string hazardQuestion {
        get {
            return _hazardQuestionProperty.value;
        }
        set {
            if (_hazardQuestionProperty.value == value) return;
            _hazardQuestionProperty.value = value;
            InvalidateUnreliableLength();
            FireHazardQuestionDidChange(value);
        }
    }
    
    public int activeButtonIndex {
        get {
            return _activeButtonIndexProperty.value;
        }
        set {
            if (_activeButtonIndexProperty.value == value) return;
            _activeButtonIndexProperty.value = value;
            InvalidateReliableLength();
            FireActiveButtonIndexDidChange(value);
        }
    }
    
    public int activeButtonFillPercentage {
        get {
            return _activeButtonFillPercentageProperty.value;
        }
        set {
            if (_activeButtonFillPercentageProperty.value == value) return;
            _activeButtonFillPercentageProperty.value = value;
            InvalidateReliableLength();
            FireActiveButtonFillPercentageDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(UserMenuModel model, T value);
    public event PropertyChangedHandler<int> menuStateDidChange;
    public event PropertyChangedHandler<UnityEngine.Vector3> menuPositionDidChange;
    public event PropertyChangedHandler<string> hazardQuestionDidChange;
    public event PropertyChangedHandler<int> activeButtonIndexDidChange;
    public event PropertyChangedHandler<int> activeButtonFillPercentageDidChange;
    
    public enum PropertyID : uint {
        MenuState = 1,
        MenuPosition = 2,
        HazardQuestion = 3,
        ActiveButtonIndex = 4,
        ActiveButtonFillPercentage = 5,
    }
    
    #region Properties
    
    private UnreliableProperty<int> _menuStateProperty;
    
    private UnreliableProperty<UnityEngine.Vector3> _menuPositionProperty;
    
    private UnreliableProperty<string> _hazardQuestionProperty;
    
    private ReliableProperty<int> _activeButtonIndexProperty;
    
    private ReliableProperty<int> _activeButtonFillPercentageProperty;
    
    #endregion
    
    public UserMenuModel() : base(null) {
        _menuStateProperty = new UnreliableProperty<int>(1, _menuState);
        _menuPositionProperty = new UnreliableProperty<UnityEngine.Vector3>(2, _menuPosition);
        _hazardQuestionProperty = new UnreliableProperty<string>(3, _hazardQuestion);
        _activeButtonIndexProperty = new ReliableProperty<int>(4, _activeButtonIndex);
        _activeButtonFillPercentageProperty = new ReliableProperty<int>(5, _activeButtonFillPercentage);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _activeButtonIndexProperty.UnsubscribeCallback();
        _activeButtonFillPercentageProperty.UnsubscribeCallback();
    }
    
    private void FireMenuStateDidChange(int value) {
        try {
            menuStateDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireMenuPositionDidChange(UnityEngine.Vector3 value) {
        try {
            menuPositionDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireHazardQuestionDidChange(string value) {
        try {
            hazardQuestionDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireActiveButtonIndexDidChange(int value) {
        try {
            activeButtonIndexDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireActiveButtonFillPercentageDidChange(int value) {
        try {
            activeButtonFillPercentageDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _menuStateProperty.WriteLength(context);
        length += _menuPositionProperty.WriteLength(context);
        length += _hazardQuestionProperty.WriteLength(context);
        length += _activeButtonIndexProperty.WriteLength(context);
        length += _activeButtonFillPercentageProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _menuStateProperty.Write(stream, context);
        writes |= _menuPositionProperty.Write(stream, context);
        writes |= _hazardQuestionProperty.Write(stream, context);
        writes |= _activeButtonIndexProperty.Write(stream, context);
        writes |= _activeButtonFillPercentageProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.MenuState: {
                    changed = _menuStateProperty.Read(stream, context);
                    if (changed) FireMenuStateDidChange(menuState);
                    break;
                }
                case (uint) PropertyID.MenuPosition: {
                    changed = _menuPositionProperty.Read(stream, context);
                    if (changed) FireMenuPositionDidChange(menuPosition);
                    break;
                }
                case (uint) PropertyID.HazardQuestion: {
                    changed = _hazardQuestionProperty.Read(stream, context);
                    if (changed) FireHazardQuestionDidChange(hazardQuestion);
                    break;
                }
                case (uint) PropertyID.ActiveButtonIndex: {
                    changed = _activeButtonIndexProperty.Read(stream, context);
                    if (changed) FireActiveButtonIndexDidChange(activeButtonIndex);
                    break;
                }
                case (uint) PropertyID.ActiveButtonFillPercentage: {
                    changed = _activeButtonFillPercentageProperty.Read(stream, context);
                    if (changed) FireActiveButtonFillPercentageDidChange(activeButtonFillPercentage);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _menuState = menuState;
        _menuPosition = menuPosition;
        _hazardQuestion = hazardQuestion;
        _activeButtonIndex = activeButtonIndex;
        _activeButtonFillPercentage = activeButtonFillPercentage;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
