workflows:
##
###################################################################################################################
#=================================================================================================================#
#================================================QA WORKFLOW================================================#
  QA_build:
    name: QA Build Workflow
    instance_type: mac_mini_m1
    max_build_duration: 120
    environment:
      groups:
        - oculus_credentials
        - unity # <--  !todo-- rename to 'unity_credentials'
      android_signing:
        - codemagic
      # Important Variables used in the workflow
      vars:
        UNITY_BIN: $UNITY_HOME/Contents/MacOS/Unity
        UNITY_VERSION: 2021.2.11f1
        UNITY_VERSION_CHANGESET: e50cafbb4399
        UNITY_VERSION_BIN: /Applications/Unity/Hub/Editor/${UNITY_VERSION}/Unity.app/Contents/MacOS/Unity
        BUILD_SCRIPT: BuildAndroid
        PACKAGE_NAME: "com.domain.bizarImplatsVR"
        OCULUS_RELEASE_CHANNEL_QA: ALPHA # QA RELEASE CHANNEL

    ## Define Behaviour for when to run builds
    triggering:
      events:
        - push
      branch_patterns:              # Include or exclude watched branches
        - pattern: '*QA'
          include: true
          source: true
        - pattern: '*qa'
          include: true
          source: true
      cancel_previous_builds: true

    scripts:
      ## PRINT ENV
      - name: Print Env
        script: | 
          #!/bin/sh
          set -ex
          printenv

      ## GET AND SET UNITY VERSION AND CHANGESET
      - name: Retrieve Used Unity Version
        script: | 
          UNITY_VERSION=$(echo $(sed -n '1p' ProjectSettings/ProjectVersion.txt) | cut -c 18-)
          UNITY_VERSION_CHANGESET=$(echo $(sed -n '2p' ProjectSettings/ProjectVersion.txt) | cut -d "(" -f2 | cut -d ")" -f1 | xargs)
          echo "UNITY_VERSION=$UNITY_VERSION" >> $CM_ENV
          echo "UNITY_VERSION_CHANGESET=$UNITY_VERSION_CHANGESET" >> $CM_ENV
          echo "UNITY_VERSION_BIN=/Applications/Unity/Hub/Editor/${UNITY_VERSION}/Unity.app/Contents/MacOS/Unity" >> $CM_ENV
      
      ## License Activation -> requires unity plus and users login details    
      - name: Activate Unity License
        script: | 
          $UNITY_BIN -batchmode -quit -logFile -serial ${UNITY_SERIAL?} -username ${UNITY_EMAIL?} -password ${UNITY_PASSWORD?} 
          
      
      ## Install our required version of unity on the host PC   
      - name: Install Unity version, buld support modules, ndk and jdk
        script: | 
          /Applications/Unity\ Hub.app/Contents/MacOS/Unity\ Hub -- --headless install --version ${UNITY_VERSION} --changeset ${UNITY_VERSION_CHANGESET}
          /Applications/Unity\ Hub.app/Contents/MacOS/Unity\ Hub -- --headless install-modules --version ${UNITY_VERSION} -m android android-sdk-ndk-tools android-open-jdk || true  
      
      - name: Set the build number
        script: | 
          export NEW_BUILD_NUMBER=$BUILD_NUMBER
          
          / export NEW_PROJECT_BUILD_NUMBER=$PROJECT_BUILD_NUMBER
      
      ## build the android apk
      - name: Build Unity app
        script: | 
          $UNITY_VERSION_BIN -batchmode -quit -logFile -projectPath . -executeMethod BuildScript.$BUILD_SCRIPT -nographics -buildTarget Android
    artifacts:
        - android/*.apk

    publishing:
      scripts:
        - name: Deactivate Unity License
          script: | 
            /Applications/Unity\ Hub.app/Contents/Frameworks/UnityLicensingClient_V1.app/Contents/MacOS/Unity.Licensing.Client \
              --return-ulf \
              --username ${UNITY_EMAIL?} \
              --password ${UNITY_PASSWORD?}
        - name: Install Oculus CLI tools
          script: | 
            wget -O ovr-platform-util \
              "https://www.oculus.com/download_app/?id=1462426033810370&access_token=OC%7C1462426033810370%7C"
            chmod +x ./ovr-platform-util
        - name: Publish app on a Oculus test release channel
          script: | 
            ./ovr-platform-util upload-quest-build \
              --app_id $OCULUS_APP_ID  \
              --app_secret $OCULUS_APP_SECRET \
              --apk android/android.apk \
              --channel $OCULUS_RELEASE_CHANNEL_QA
####

#=================================================================================================================#
#===============================================PRODUCTION WORKFLOW===============================================#

  
    
  Production_build:
      name: Production Build Workflow
      instance_type: mac_mini_m1
      max_build_duration: 120
      environment:
        groups:
          - oculus_credentials
          - unity # <--  !todo-- rename to 'unity_credentials'
        android_signing:
          - codemagic
        # Important Variables used in the workflow
        vars:
          UNITY_BIN: $UNITY_HOME/Contents/MacOS/Unity
          UNITY_VERSION: 2021.2.11f1
          UNITY_VERSION_CHANGESET: e50cafbb4399
          UNITY_VERSION_BIN: /Applications/Unity/Hub/Editor/${UNITY_VERSION}/Unity.app/Contents/MacOS/Unity
          BUILD_SCRIPT: BuildAndroid
          PACKAGE_NAME: "com.domain.bizarImplatsVR"
          OCULUS_RELEASE_CHANNEL_PROD: BETA # PRODUCTION RELEASE CHANNEL

      ## Define Behaviour for when to run builds
      triggering:
        events:
          - push
        branch_patterns:              # Include or exclude watched branches
          - pattern: '*production'
            include: true
            source: true
        cancel_previous_builds: true

      scripts:
        ## PRINT ENV
        - name: Print Env
          script: | 
            #!/bin/sh
            set -ex
            printenv

        ## GET AND SET UNITY VERSION AND CHANGESET
        - name: Retrieve Used Unity Version
          script: | 
            UNITY_VERSION=$(echo $(sed -n '1p' ProjectSettings/ProjectVersion.txt) | cut -c 18-)
            UNITY_VERSION_CHANGESET=$(echo $(sed -n '2p' ProjectSettings/ProjectVersion.txt) | cut -d "(" -f2 | cut -d ")" -f1 | xargs)
            echo "UNITY_VERSION=$UNITY_VERSION" >> $CM_ENV
            echo "UNITY_VERSION_CHANGESET=$UNITY_VERSION_CHANGESET" >> $CM_ENV
            echo "UNITY_VERSION_BIN=/Applications/Unity/Hub/Editor/${UNITY_VERSION}/Unity.app/Contents/MacOS/Unity" >> $CM_ENV
        
        ## License Activation -> requires unity plus and users login details    
        - name: Activate Unity License
          script: | 
            $UNITY_BIN -batchmode -quit -logFile -serial ${UNITY_SERIAL?} -username ${UNITY_EMAIL?} -password ${UNITY_PASSWORD?} 
            
        
        ## Install our required version of unity on the host PC   
        - name: Install Unity version, buld support modules, ndk and jdk
          script: | 
            /Applications/Unity\ Hub.app/Contents/MacOS/Unity\ Hub -- --headless install --version ${UNITY_VERSION} --changeset ${UNITY_VERSION_CHANGESET}
            /Applications/Unity\ Hub.app/Contents/MacOS/Unity\ Hub -- --headless install-modules --version ${UNITY_VERSION} -m android android-sdk-ndk-tools android-open-jdk || true  
        
        - name: Set the build number
          script: | 
            export NEW_BUILD_NUMBER=$BUILD_NUMBER
        
        ## build the android apk
        - name: Build Unity app
          script: | 
            $UNITY_VERSION_BIN -batchmode -quit -logFile -projectPath . -executeMethod BuildScript.$BUILD_SCRIPT -nographics -buildTarget Android
      artifacts:
          - android/*.apk

      publishing:
        scripts:
          - name: Deactivate Unity License
            script: | 
              /Applications/Unity\ Hub.app/Contents/Frameworks/UnityLicensingClient_V1.app/Contents/MacOS/Unity.Licensing.Client \
                --return-ulf \
                --username ${UNITY_EMAIL?} \
                --password ${UNITY_PASSWORD?}
          - name: Install Oculus CLI tools
            script: | 
              wget -O ovr-platform-util \
                "https://www.oculus.com/download_app/?id=1462426033810370&access_token=OC%7C1462426033810370%7C"
              chmod +x ./ovr-platform-util
          - name: Publish app on a Oculus test release channel
            script: | 
              ./ovr-platform-util upload-quest-build \
                --app_id $OCULUS_APP_ID  \
                --app_secret $OCULUS_APP_SECRET \
                --apk android/android.apk \
                --channel $OCULUS_RELEASE_CHANNEL_PROD


  #=================================================================================================================#
  ###################################################################################################################
